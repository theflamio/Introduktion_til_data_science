---
title: "Data Science Exam: Part 1"
author: "Flemming Christensen"
date: "2024-09-21"
format:
  html:
    toc: true  # Enable the table of contents
    toc_depth: 2  # Specify the depth of headers to include in the TOC
---


```{r}
library(readr)
library(rvest)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(plotly)
```


# Introduction
This exam is constructed with 24 Exercises that need to be solved and argumented.
Why this solution or method has been used.

# Exercise 1
Read in the data in the file world_population.csv and select/deselect and rename 
columns so you end up with a tibble (tbl) named wpop_full with 266 rows and 65 
columns with names as shown in the output below (the last column being 2022). 
Hint: Use skip in read_csv to avoid header lines not containing data or names of data.

## import data from csv

```{r}
here::here()

data_dir <- here::here("world_population.csv") #set the directory to were the project and dataset is used

wpop_raw_dat = read_csv(data_dir, skip = 3) # Read csv file and skip the last update info and empty rows

# lets take a look of the data
glimpse(wpop_raw_dat) #looks like there is a lot of NA's in 2023 and the data dose not have column names

```

## Add column names and renaming

```{r}
colnames(wpop_raw_dat) <- as.character(unlist(wpop_raw_dat[1,])) # Make the first row the column names

# next two steps are need to remove exstra column added when making column names

wpop_raw_dat <- wpop_raw_dat[-1, ] # Remove the first row

rownames(wpop_raw_dat) <- NULL # Reset row names

head(wpop_raw_dat) # Confirm that data set now have column names

wpop_raw_dat <- wpop_raw_dat |> # Rename of duplicated meaning in column names
  rename(
    country = `Country Name`,
    code = `Country Code`
  )

head(wpop_raw_dat) # see data structure
```
## Remove unwanted columns
```{r}
wpop_raw_dat <- wpop_raw_dat |> # remove column "indicator Name" and "Indicator Code".
  select(-`Indicator Name`, -`Indicator Code`)

head(wpop_raw_dat) # confirm that columns have been removed.

wpop_full <- wpop_raw_dat |> # Remove year 2023 so that 2022 is last column
  select(-`2023`)
```
## wpop_full result
```{r}
wpop_full
```


# Exercise 2
Use the package rvest to read in the list of country codes from the main table 
at https://en.wikipedia.org/wiki/ISO_3166-1 and select/deselect and rename 
columns so you end up with a tibble (tbl) named iso_codes_all with 249 rows and 
3 columns with names as shown in the output below.

## Web scraping data from Wikipedia
```{r}
url <- "https://en.wikipedia.org/wiki/ISO_3166-1"

webpage <- read_html(url)

tables <- webpage |> 
  html_nodes("table") |>  # Specify the CSS selector for the table. "html_nodes" takes all tables. "html_node" takes only the first.
  html_table()            # Convert the HTML table to a data frame

head(tables) # we need table number 2
  
raw_dat <- tables[[2]] # number 2 table aka ISO 3166-1 table
  

head(raw_dat) # OBS Afghanistan[c] the [C] means that the country is under that category "Naming and disputes" which is correct

```

## remove and rename columns

```{r}
colnames(raw_dat)

raw_dat <- raw_dat |>
  rename(
    name = `English short name  (using title case)`,
    iso3 = `Alpha-3 code`,
    independent = `Independent[b]`
  )

colnames(raw_dat) #check rename was done

iso_codes_all <- raw_dat |>
  select(name, iso3, independent)

```
## iso_codes_all result
```{r}
iso_codes_all
```

# Exercise 3
Use filter() to extract the independent countries from iso_codes_all and save the result as iso_codes.

```{r}
iso_codes <- iso_codes_all |>
  filter(independent == "Yes")

iso_codes
```


# Exercise 4
Use a suitable join (and/or filter) command to make a dataset wpop only containing those rows of wpop_full which have a matching ISO country code in iso_codes:

```{r}
# return only rows that have a match in the iso_codes without columns therefore semi_join and not inner_join
wpop <- semi_join(wpop_full, iso_codes, by = c("code" = "iso3")) 

wpop
```


# Exercise 5
Show the countries/areas which have the same ISO country code in both wpop and iso_codes but different (spellings of) country names.

```{r}
join_data <- inner_join(wpop, iso_codes, by = c("code" = "iso3"))

different_spelling <- filter(join_data, country != name)

result <- different_spelling |> 
  select(name, code, country)

result

```


# Exercise 6
Use the package rvest to read in the list of countries with corresponding continent codes from the main table at https://en.wikipedia.org/wiki/List_of_sovereign_states_and_dependent_territories_by_continent_(data_file) 
and select/deselect and rename columns so you end up with a tibble (tbl) named continents with 253 rows and 
2 columns with names as shown in the output below.

Important hint: you need convert = FALSE in html_table() to avoid the text string "NA" (North America) to be interpreted as missing data (Not Available).

## Web scraping data from Wikipedia
```{r}
url <- "https://en.wikipedia.org/wiki/List_of_sovereign_states_and_dependent_territories_by_continent_(data_file)"

webpage <- read_html(url)

tables <- webpage |> 
  html_nodes("table") |> # Specify the CSS selector for the table.
  html_table(convert = FALSE)

print(tables)

raw_continents <- tables[[3]]

raw_continents
```

## remove and rename columns
```{r}
colnames(raw_continents)

raw_continents <- raw_continents |>
  rename(
    continent = `CC`,
    iso3 = `a-3`
  )

colnames(raw_continents) #check rename was done

continents <- raw_continents |>
  select(continent, iso3)
```
## Result
```{r}
continents
```


# Exercise 7
Make a new dataset wpop2 by extending wpop with the extra column continent from the continents data (possibly using relocate() to move the continent column to the left to see it more clearly).

```{r}
join_data <- inner_join(wpop, continents, by = c("code" = "iso3")) #join wpop and continent table.

wpop2 <- join_data |>
  relocate(continent, .before = country) # set continent to left of country

wpop2
```


# Exercise 8
Use pivot_longer() to reshape wpop2 into “long format” with columns as shown below (in particular make sure year is a numeric variable) and call the resulting tibble pop_long.

```{r}
pop_long <- wpop2 |>
  pivot_longer(cols = `1960`:`2022`,  # Columns to pivot (year columns)
               names_to = "year",     # New column for years
               values_to = "pop")     # New column for population values

pop_long <- pop_long |>
  mutate(year = as.numeric(year))  # Convert year to numeric

pop_long
```

# Exercise 9
Make a line plot showing the population over all the years in the data with one line per country with semi-transparent lines.

```{r}
ggplot(pop_long, aes(x = year, y = pop, group = country)) +
  geom_line(alpha = 0.4) +
  labs(title = "Population Growth Over Time by Country",
       x = "Year",
       y = "Population",) +
  scale_x_continuous(breaks = seq(1960, 2022, by = 20))
```


# Exercise 10
Use the code below to rescale each country’s population size to an population index which in 1 for every country in 1960. An index value of e.g. 2 would mean that the population size of that country has doubled since 1960.

```{r}
pop_index_data <- pop_long |> 
  group_by(country,continent,code) |> 
  mutate(pop_index = pop/pop[1])
```


# Exercise 11
Make a line plot showing the indexed population numbers over all the years in the data with one line per country with semi-transparent lines.

```{r}
plt <- ggplot(pop_index_data, aes(x = year, y = pop_index, group = country)) +
  geom_line(alpha = 0.4) +
  labs(title = "Population Growth Over Time by Country\nIndex 2 = double population size since 1960",
       x = "Year",
       y = "Population index for each country") +
  scale_x_continuous(breaks = seq(1960, 2022, by = 20))

interactive_plot <- ggplotly(plt) # Make the plot interactive

interactive_plot # Display the interactive plot
```


# Exercise 12
Identify the two countries with extreme population indices and make a new line plot showing the indexed population numbers over all the years in the data with one line per country with semi-transparent lines without these two countries.

## Identify two countries with extreme population indices
```{r}
# method 1 use the interactive map above which show United Arab Emirates and Qatar are extreme.

extreme_pop_indices <- pop_index_data |>
  filter(pop_index > 60) |> # 60 because only two countries in 2020 are above it and can be considered extreme.
  select(country) |>
  distinct()

extreme_pop_indices #United Arab Emirates and Qatar must be removed. This 

pop_index_data <- pop_index_data |>
  filter(!country %in% c("United Arab Emirates", "Qatar"))
```


## new plot without extreme popultation index

```{r}
plt <- ggplot(pop_index_data, aes(x = year, y = pop_index, group = country)) +
  geom_line(alpha = 0.4) +
  labs(title = "Without Qatar and UAE\nIndex 2 = double population size since 1960",
       x = "Year",
       y = "Population index for each country") +
  scale_x_continuous(breaks = seq(1960, 2022, by = 20))

interactive_plot <- ggplotly(plt) # Make the plot interactive

interactive_plot # Display the interactive plot
```


# Exercise 13
Run the following command and describe in a few words what the result growth_long is.

```{r}
growth_long <- pop_long |> 
  group_by(country,continent,code) |>                 # groups country first then continent and finally code. 
  reframe(pop_start = pop[1:(length(pop)-1)],         # take all elements of "pop" except last.
          pop_end = pop[2:length(pop)],               # take all elements of "pop" except first.
          growth = 100*(pop_end-pop_start)/pop_start, # Calculate the growth rate between years "in %".
          end_year = year[2:length(year)])            # End of year of each interval "remove 1960"

growth_long

# explain it wiht few words:

# Population start year is 1960 which is the fist pop_start of each country.
# pop_end is the population count by the end of the year. example 1960 - 1961 which is then the pop_stat in 1961.
# growth is the percentage growth of the population each year.
```

# Exercise 14
Make a line plot showing the population over all the years in the data with one line per country with semi-transparent lines.

```{r}
ggplot(growth_long, aes(end_year, growth, group = country))+
  geom_line(alpha = 0.4) +
    labs(title = "Population growth per year in percentage",
         x = "Year",
         y = "Year-to-year population growth in pct") +
    scale_x_continuous(breaks = seq(1960, 2022, by = 20))
```


# Exercise 15
Make a similar graphic as above but with one panel/facet per continent.

```{r}
ggplot(growth_long, aes(end_year, growth, group = country))+
  geom_line(alpha = 0.4) +
    labs(title = "Population growth per year in percentage each county",
         x = "Year",
         y = "Year-to-year population growth in pct") +
    scale_x_continuous(breaks = seq(1960, 2022, by = 20)) +
  facet_wrap(~ continent)  # Create one panel per continent
```


# Exercise 16
For each country find both the largest positive and the smallest (most negative) growth over the years in the data so you end up with a tibble (tbl) named growth_range with 193 rows and 3 columns with names as shown in the output below. hint: group_by() and summarise() are your friends.

```{r}
growth_range <- growth_long |>
  group_by(country) |>                          # groups country. 
  reframe(max_growth = signif(max(growth),3),   # largest positive growth. signif rounds number to specified number of significant 
          min_growth = signif(min(growth),3))   # smallest/negative growth.

growth_range
```


# Exercise 17
Find the 10 countries which have experienced the largest growth percentage of all at some point over the years in the data.

```{r}
top10 <- growth_range |>
  arrange(desc(max_growth)) |> # Sort by max growth in descending order (largest to smallest)
  head(10)

top10
```

# Exercise 18
Find the 10 countries which have experienced the most negative growth percentage of all at some point over the years in the data.

```{r}
bottom10 <- growth_range |>
  arrange(min_growth) |> # Sort by min growth in with arranage() (smallest to largest)
  head(10)

bottom10
```

# Exercise 19
Make a line plot showing the population over all the years in the data with different colours for each country represented in top10.

```{r}
top10Years <- growth_long |>
  inner_join(top10, by = "country") |>
  select(country, growth, end_year) # select relevant columns

ggplot(top10Years, aes(end_year, growth, group = country, color = country))+
  geom_line(alpha = 0.6) +
    labs(title = "top 10 country growth per year in percentage",
         x = "end_Year",
         y = "Year-to-year population growth in pct") +
    scale_x_continuous(breaks = seq(1960, 2022, by = 20))
```


# Exercise 20
Use pivot_wider() to reshape growth_long to wide format with one column per year and call the result growth.

```{r}
growth <- growth_long |>
  select(country, continent, code, end_year, growth) |> # select relevant columns otherwise pop_start and end will ruin it
  pivot_wider(
    names_from = end_year,
    values_from = growth
  ) |>
    arrange(country)

growth
```


# Exercise 21
Make a hierarchical clustering of the growth data in 9 groups. The following hints can be used to achieve this:

clustering is unsupervised learning where our input data have no labels. Clustering can help us with this to group our data 
and label them.

## 1: Remove non-numerical columns from data
```{r}
growth_Numerical <- Filter(is.numeric, growth) #only return numeric columns. 

# growth_Numerical <- growth |> select_if(is.numeric) could also be used.

growth_Numerical # check
```


## 2: Calculate distances
```{r}
# Compute the distance matrix using Euclidean distance
distances <- dist(growth_Numerical, method = "euclidean")
```

## 3: Use hclust() to run the clustering algorithm
```{r}
hc <- hclust(distances)
hc
```

## 4: Use cutree() to make the cluster labels
```{r}
clusters <- cutree(hc, k = 9) # 9 groups
clusters
```

## 5: Use mutate to add the cluster label as a variable to growth
```{r}
growth_clust <- growth |>
  mutate(cluster = clusters) |>
  relocate(cluster, .after = code)
```
## Result
```{r}
growth_clust
```

# Exercise 22
Use group_split() and lapply() similarly to below to extract the countries of each cluster
and display them nicely with pander::pander():

```{r}
growth_clust |> 
  group_split(cluster) |> 
  lapply(function(x) x$country) |> 
  pander::pander()
```


# Exercise 23
Use pivot_longer() to convert growth_clust to long format and plot growth as a function of time with a panel/facet for each cluster.

## Use pivot_longer() to convert growth_clust to long format
```{r}
growth_clust_long <- growth_clust |>
  pivot_longer(cols = `1961`:`2022`,  # Columns to pivot (year columns)
               names_to = "year",     
               values_to = "growth")
growth_clust_long
```

## plot growth as a function of time with a panel/facet for each cluster.

```{r}
# remember year is <chr> so it needs to be converted to numeric

ggplot(growth_clust_long, aes(x = as.numeric(year), y = growth, group = country)) +
  geom_line(alpha = 0.6) +
  facet_wrap(~cluster) + # Create a panel for each cluster
  labs(title = "Growth over Time by Cluster",
       x = "Year",
       y = "Year-to-year population growth in pct")
```


# Exercise 24
The code below can be used to calculate average growth rates over several years.

```{r}
agg_year <- 5 # define numbers of years to aggregate the growth rates

aggr_growth_long <- growth_long |>
  mutate(period=((end_year - min(end_year)) %/% agg_year) * agg_year + min(end_year)) |> 
  group_by(period, code, country, continent) |> #needed to subsequent summarization
  summarise(avg_growth = mean(growth)) #calculate avg growth foreach group

aggr_growth_long

```

Use the clustering technique of the previous exercise to divide the data into different clusters. Experiment with several period lengths (aggregation years) and number of clusters and show results for at least one combination of agg_year and number of clusters. An example is given below.

## Prepare the data for clustering

```{r}
# Pivot the data to wide format
aggr_growth_wide <- aggr_growth_long |>
  select(code, country, period, avg_growth) |>
  pivot_wider(
    names_from = period,
    values_from = avg_growth
  )

head(aggr_growth_wide)

# Remove non-numerical columns.

aggr_growth_Numerical <- Filter(is.numeric, aggr_growth_wide) #only return numeric columns. 

head(aggr_growth_Numerical)
```


## Calculate distance
```{r}
# Compute the distance matrix using Euclidean distance
distances_aggr_growth <- dist(aggr_growth_Numerical, method = "euclidean")
```

## Cluster algorithm

```{r}
hc <- hclust(distances_aggr_growth)
hc
```
## label the clusters

```{r}
clusters <- cutree(hc, k = 9) # 9 groups

clusters
```

## add cluster labels to aggr_growth_wide

```{r}
# to add cluster to aggr_growth_wide we need to ungroup the dataframe so it add a cluster number foreach country and not group.
aggr_growth_wide <- aggr_growth_wide |> ungroup()  

aggr_growth_clust <- aggr_growth_wide |>
  mutate(cluster = clusters) |>
  relocate(cluster, .after = country)

head(aggr_growth_clust)
```
## prepare for plot

```{r}
aggr_growth_clust

aggr_growth_clust_long <- aggr_growth_clust |>
  pivot_longer(cols = `1961`:`2021`,  # Columns to pivot (year columns)
               names_to = "year",        # New column for years
               values_to = "avg_growth") |> # New column for avg_growth values
               group_by(country)

head(aggr_growth_clust_long)
```


## Plot growth avg of each country aggregatied year (5) 

```{r}
ggplot(aggr_growth_clust_long, aes(as.numeric(year), avg_growth, group_by =  country)) +
  geom_line(alpha = 0.2) +
  scale_x_continuous(breaks = seq(1960, 2022, by = 20)) +
  labs(title = "Average Growth Over the aggregated years (5) by country", x = "Year", y = "Average Growth")
```
## bob

```{r}

```

## facet plot

```{r}


```

## Project dependencies

```{r}
sessionInfo()
```

